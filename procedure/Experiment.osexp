---
API: 2
OpenSesame: 3.0.7
Platform: posix
---
set width 1680
set uniform_coordinates no
set transparent_variables no
set title MT_SOM_Experiment
set synth_backend legacy
set subject_parity even
set subject_nr 0
set start experiment
set sampler_backend legacy
set mouse_backend legacy
set keyboard_backend legacy
set height 1050
set foreground white
set font_size 24
set font_italic no
set font_family mono
set font_bold no
set experiment_path "/Users/tom/github/MT_SOM_experiment/procedure"
set description "A simple template for the mouse-tracking paradigm"
set custom_cursor no
set coordinates relative
set compensation 0
set color_backend legacy
set clock_backend legacy
set canvas_backend legacy
set bidi no
set background black

define sequence block1_sequence
	set flush_keyboard yes
	set description "Runs a number of items in sequence"
	run mousetracking_script_block1 always
	run logger always

define loop block_1
	set skip 0
	set repeat 1
	set order random
	set offset no
	set item block1_sequence
	set description "Repeatedly runs another item"
	set cycles 6
	set column_order "stimulus;truth;SOAcondition;operation;size"
	set break_if never
	setcycle 0 stimulus "2 + 3"
	setcycle 0 SOAcondition "neutral"
	setcycle 0 operation "add"
	setcycle 0 truth "false"
	setcycle 0 size "small"
	setcycle 1 stimulus "3 + 4"
	setcycle 1 SOAcondition "neutral"
	setcycle 1 operation "add"
	setcycle 1 truth "false"
	setcycle 1 size "small"
	setcycle 2 stimulus "3 + 5"
	setcycle 2 SOAcondition "neutral"
	setcycle 2 operation "add"
	setcycle 2 truth "true"
	setcycle 2 size "small"
	setcycle 3 stimulus "4 + 2"
	setcycle 3 SOAcondition "neutral"
	setcycle 3 operation "add"
	setcycle 3 truth "true"
	setcycle 3 size "small"
	setcycle 4 stimulus "5 + 6"
	setcycle 4 SOAcondition "neutral"
	setcycle 4 operation "mult"
	setcycle 4 truth "false"
	setcycle 4 size "small"
	setcycle 5 stimulus "1 + 5"
	setcycle 5 SOAcondition "neutral"
	setcycle 5 operation "mult"
	setcycle 5 truth "false"
	setcycle 5 size "small"
	run block1_sequence

define sequence experiment
	set flush_keyboard yes
	set description "Runs a number of items in sequence"
	run setup_script always
	run instruction1 always
	run block_1 always
	run finish always

define sketchpad finish
	set duration keypress
	set description "Displays stimuli"
	draw textline center=1 color=white font_bold=no font_family=mono font_italic=no font_size=24 html=yes show_if=always text="You are now finished with the experiment. <br>  Thank you for your participation!" x=32 y=-64 z_index=0

define sketchpad instruction1
	set duration keypress
	set description "Displays stimuli"
	draw textline center=0 color=white font_bold=no font_family=mono font_italic=no font_size=24 html=yes show_if=always text="In this experiment, you will be deciding whether<br />equations involving simple arithmetic are true <br />or false.<br /><br />After you click on the START button with your mouse,<br />the equation will appear in the center of the screen.<br />You will then move your mouse and click either True or<br />False, depending on the equation.<br /><br />Please start moving your mouse as quickly as possible.<br />Try to be quick, but accurate.<br /><br />To get accustomed to the task, you will do 16 practice trials.<br /><br />When you are ready to begin, press any key." x=-352 y=-256 z_index=0

define logger logger
	set use_quotes yes
	set ignore_missing yes
	set description "Logs experimental data"
	set auto_log no
	log height
	log subject_nr
	log width
	log response
	log accuracy
	log rt
	log xTrajectory
	log yTrajectory
	log tTrajectory
	log stimulus
	log truth
	log operation
	log size
	log SOAcondition
	log endpoint

define inline_script mousetracking_script_block1
	set description "Executes Python code"
	___run__
	# Draw start button and number line
	# define common stimulus elements as Python functions
	
	# number line
	def number_line():
		my_canvas.line(0.1*2*mx,0.1*2*my,0.9*2*mx,0.1*2*my,color='white') 
		my_canvas.set_font(style='helvetica',size=30)
		my_canvas.text("0",x=0.1*2*mx-15,y=0.1*2*my,color='gray')
		my_canvas.text("20",x=0.9*2*mx+25,y=0.1*2*my,color='gray')
	
	# start button
	def start_button():
		my_canvas.set_font(style='mono',size=24)
		my_canvas.rect(x=mx-0.5*start_w,y=2*my-start_h,w=start_w,h=start_h,fill=True,color='gray')  
		my_canvas.text("Start",x=mx,y=2*my-0.5*start_h,color='white')
	
	
	number_line()
	start_button()
	my_canvas.show()
	my_mouse.show_cursor(show=True)
	
	# Display fixation cross after click on start button
	while 1:
		button, position, timestamp = my_mouse.get_click()
		x, y = position
		if x > mx-0.5*start_w and x < mx+0.5*start_w and y > (2*my) - start_h:
			my_canvas.clear()
			break
	
	my_canvas.set_font(style='mono',size=60)
	my_canvas.text('+')
	number_line()
	start_button()
	my_canvas.show()
	
	# display problem above number line when mouse gets high enough on screen
	
	while 1:
		position, timestamp = my_mouse.get_pos()
		x, y = position
		if y < 0.9*2*my:
			my_canvas.clear()
			break
			
	number_line()
	start_button()
	
	# problem
	my_canvas.set_font(style='arial',size=60)
	my_canvas.text(stimulus,x=mx,y=0.05*2*my,color='white')
	
	my_canvas.show()
	
	
	
	
	# The actual mouse tracking
	t0 = start = exp.time()
	t1 = t0 + sample_rate
	resp = 0
	timed_out = False
	slow_start = False
	while 1:
		position, timestamp = my_mouse.get_pos()
		x, y = position
		if y < 0.1*2*my:
			rt=timestamp-start
			endpoint=x
			my_canvas.arrow(x,0.1*2*my+40,x,0.1*2*my,arrow_size=15,color='green',fill=True)
			my_canvas.show()
			break
				
		if timestamp > t1:
			# It's time to record the mouse position
			t1 += sample_rate
			t = timestamp - start
			xList.append(x)
			yList.append(y)
			tList.append(t)
			
	
	
	# Standard Logging (the probe and code variables are taken care of automatically)
	#self.experiment.set("response", resp)
	#self.experiment.set("accuracy", accuracy)
	self.experiment.set("endpoint",endpoint)
	self.experiment.set("rt", rt)
	self.experiment.set("xTrajectory", str(xList))
	self.experiment.set("yTrajectory", str(yList))
	self.experiment.set("tTrajectory", str(tList))
	#self.experiment.set("trialNumber", count_block1_sequence)
	__end__
	___prepare__
	# Constants
	max_response_time = 2000
	fixation_length = 900
	error_message_duration = 2000
	max_init_time = 800
	sample_rate = 10
	
	# Text
	timeout_message = "Too slow!\n\
	Try to respond more quickly.\n\
	Press any key to continue."
	slow_start_message = "\
	Please try to move the mouse as soon\n\
	as you see the target, even if you're not\n\
	sure of your response yet\n\
	Press any key to continue."
	error_message = "<span color='red'>X</span>"
	
	# Turn our OpenSesame variables into plain Python ones
	stimulus = exp.get('stimulus')
	truth = exp.get('truth')
	SOAcondition = exp.get('SOAcondition')
	operation = exp.get('operation')
	
	
	
	
	# Get the size of the screen
	mx = my_canvas.xcenter()
	my = my_canvas.ycenter()
	
	# Some dimensions
	# start button sized as in Dotan & Dehaene (2013)
	start_w=0.0585*2*mx
	start_h=0.052*2*my
	
	# Some empty lists for recording mouse data
	xList, yList, tList = [], [], []
	__end__

define inline_script setup_script
	set description "Executes Python code"
	___run__
	# Create our input and output routines
	from openexp.mouse import mouse
	from openexp.keyboard import keyboard
	from openexp.canvas import canvas
	my_mouse = mouse(exp, visible=True)
	my_keyboard = keyboard(exp)
	my_canvas = canvas(exp)
	# Declare them as global, so we can use them later on.
	global my_mouse, my_keyboard, my_canvas
	__end__
	set _prepare ""

